unit VersioningRT.Logic;

interface

uses
  System.SysUtils, System.Classes, VersioningRT.LogicInterface, System.JSON, VersioningRT.FileManager, VersioningRT.JsonBuilder;
type
  TDatabaseVersioning = class(TInterfacedObject, IDatabaseVersioning)
  private

    FFileManager : TFileManager;


    function GetFileManager: TFileManager;
    property FileManager: TFileManager read GetFileManager write FFileManager;
  public
    constructor Create;
    procedure InitializeVersioning;
    procedure AddMigration(AUser, AMigrationQuery, ADescription, ARollbackQuery: string);
    procedure ExecuteMigrations;
    procedure RollbackLastMigration;
  end;

implementation

uses
  VersioningRT.Constants;

{ TDatabaseVersioning }

procedure TDatabaseVersioning.AddMigration(AUser, AMigrationQuery, ADescription, ARollbackQuery: string);
var
  LMigrationJson: TJSONObject;
  LFileName: string;
begin
  LFileName := FormatDateTime('yyyy-mm-dd-hh:nn:ss:zzz', Now);
  LMigrationJson := TJSONObject.Create;
  LMigrationJson := TJSONBuilder.CreateMigrationJSON(AUser, LFileName, AMigrationQuery, ADescription, ARollbackQuery);
  FileManager.WriteToFile(MIGRATION_LOCATION + LFileName, LMigrationJson);
end;

constructor TDatabaseVersioning.Create;
begin
  inherited;
  FFileManager := nil;
end;

procedure TDatabaseVersioning.ExecuteMigrations;
begin
  if Assigned(FFileManager) then
    FFileManager.Free;
  inherited;
end;

function TDatabaseVersioning.GetFileManager: TFileManager;
begin
  if not Assigned(FFileManager) then
    FFileManager := TFileManager.Create;
  Result := FFileManager;
end;

procedure TDatabaseVersioning.InitializeVersioning;
begin

end;

procedure TDatabaseVersioning.RollbackLastMigration;
begin

end;

end.
